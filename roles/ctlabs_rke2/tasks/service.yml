---

# ------------------------------------------------------------------------------
# File        : ctlabs-ansible/roles/ctlabs_rke2/tasks/service.yml
# Description : service
# ------------------------------------------------------------------------------

- name: ctlabs_rke2.tasks.service.server
  when: ctlabs_rke2_role == "server"
  block:
    - name: ctlabs_rke2.tasks.service.server.present
      template:
        src  : "{{ ctlabs_rke2.defaults.service.server.template }}"
        dest : "{{ ctg_systemd_dir + '/' + ctlabs_rke2.defaults.service.server.name }}"
      notify: ctlabs_rke2.handlers.server.systemd.reload
    
    - name: ctlabs_rke2.tasks.service.server.started
      service:
        name  : "{{ ctlabs_rke2.defaults.service.server.name }}"
        state : started
    
- name: ctlabs_rke2.tasks.service.agent
  when: ctlabs_rke2_role == "agent"
  block:
    - name: ctlabs_rke2.tasks.service.agent.present
      template:
        src  : "{{ ctlabs_rke2.defaults.service.agent.template }}"
        dest : "{{ ctg_systemd_dir + '/' + ctlabs_rke2.defaults.service.agent.name }}"
      notify: ctlabs_rke2.handlers.agent.systemd.reload

    - name: ctlabs_rke2.tasks.service.agent.sysconfig.present
      template:
        src  : "{{ ctlabs_rke2.defaults.sysconfig.agent.template }}"
        dest : "{{ ctlabs_rke2.defaults.sysconfig.agent.name     }}"

    
    - name: ctlabs_rke2.tasks.service.agent.started
      service:
        name  : "{{ ctlabs_rke2.defaults.service.agent.name }}"
        state : started
    
- name: ctlabs_rke2.tasks.service.cluster
  when: ctlabs_rke2_role == "server"
  block:
    - name: ctlabs_rke2.tasks.service.cluster.ready
      vars:
        ansible_python_interpreter: /usr/sbin/ip vrf exec default /usr/bin/python3
      ansible.builtin.wait_for:
        host  : "{{ ansible_nodename }}"
        port  : 6443
        delay : 10 

    - name: ctlabs_rke2.tasks.service.cluster.ingress.ready
      vars:
        ansible_python_interpreter: /usr/sbin/ip vrf exec default /usr/bin/python3
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml
      kubernetes.core.k8s_info:
        kind      : Daemonset
        name      : rke2-ingress-nginx-controller
        namespace : kube-system
        wait      : true

    - name: ctlabs_rke2.tasks.service.argocd
      vars:
        ansible_python_interpreter: /usr/sbin/ip vrf exec default /usr/bin/python3
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml
      kubernetes.core.helm:
        name              : argocd
        chart_ref         : argo/argo-cd
        release_namespace : argo
        create_namespace  : true
        update_repo_cache : true
        wait              : true
        atomic            : true
        values:
          global:
            domain:
          configs:
            secret:
              argocdServerAdminPassword: $2a$10$su0tAsqr1mOHxP4EoT7ExOZLSGw4C9GiG30GHaLVCA1ceW6CXl4r2
            params:
              server.insecure: true
          server:
            ingress:
              enabled         : true
              ingressClassName: nginx
      register: res_argo
      until   : res_argo is success
